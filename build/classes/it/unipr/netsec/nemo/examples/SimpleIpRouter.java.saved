/*
 * Copyright 2018 NetSec Lab - University of Parma
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author(s):
 * Luca Veltri (luca.veltri@unipr.it)
 */

package it.unipr.netsec.nemo.examples;


import org.zoolu.util.LoggerLevel;
import org.zoolu.util.SystemUtils;

import it.unipr.netsec.ipstack.ip4.Ip4Packet;
import it.unipr.netsec.ipstack.ip6.Ip6Packet;
import it.unipr.netsec.ipstack.link.LinkInterface;
import it.unipr.netsec.ipstack.net.Node;
import it.unipr.netsec.ipstack.net.Packet;
import it.unipr.netsec.ipstack.routing.RoutingTable;


/** IP Router.
 * */
public class SimpleIpRouter extends Node {

	/** Debug mode */
	public static boolean DEBUG=false;

	/** Prints a debug message. */
	void debug(String str) {
		if (DEBUG) SystemUtils.log(LoggerLevel.DEBUG,toString()+": "+str);
	}


	/** Local link address */
	String local_link_addr;

	
	/** Creates a new router.
	 * @param local_link_addr local link address */
	public SimpleIpRouter(String local_link_addr) {
		this(local_link_addr,null);
	}
	
	/** Creates a new router.
	 * @param local_link_addr local link address
	 * @param net_interfaces network interfaces */
	public SimpleIpRouter(String local_link_addr, LinkInterface[] net_interfaces) {
		super(net_interfaces,new RoutingTable(),true);
		this.local_link_addr=local_link_addr;
	}
	
	@Override
	protected void processForwardingPacket(Packet pkt) {
		if (pkt instanceof Ip4Packet) {
			Ip4Packet ip4_pkt=(Ip4Packet)pkt;
			int ttl=ip4_pkt.getTTL();
			ttl--;
			if (ttl>0) {
				ip4_pkt.setTTL(ttl);
				super.processForwardingPacket(ip4_pkt);
			}
			else {
				// TODO
				// send a ICMP Time Exceeded message 
			}
		}
		else
		if (pkt instanceof Ip6Packet) {
			Ip6Packet ip6_pkt=(Ip6Packet)pkt;
			int hop_limit=ip6_pkt.getHopLimit();
			hop_limit--;
			if (hop_limit>0) {
				ip6_pkt.setHopLimit(hop_limit);
				super.processForwardingPacket(ip6_pkt);
			}
			else {
				// TODO
				// send a ICMPv6 Hop Limit Exceeded message 
			}			
		}
		else {
			throw new RuntimeException("It is not an IP packet: "+pkt);
		}
	}

	@Override
	public String toString() {
		return getClass().getSimpleName()+'['+local_link_addr+']';
	}


}
